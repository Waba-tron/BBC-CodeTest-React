{"version":3,"sources":["components/nav/nav.jsx","random-article.js","article.js","rank.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","style","to","RandomArticle","useEffect","randomNumber","Math","floor","random","articleTypes","console","log","a","fetch","data","json","Article","setArticlesTitle","title","setArticlesHeading","body","model","text","setArticles","fetchItems","useState","articles","articleTitle","articleHeading","map","article","type","src","url","alt","altText","width","height","match","params","id","Rank","highestRank","setHighestRank","middleRank","setMiddleRank","lowestRank","setLowestRank","displayHighestRank","setDisplayHighestRank","displayMiddleRank","setDisplayMiddleRank","displayLowestRank","setDisplayLowestRank","onSubmit","event","preventDefault","placeholder","name","onChange","target","value","Home","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25ed5a6b.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nexport default function Nav() {\r\n\r\n    const navStyle = {\r\n        color: 'white'\r\n    }\r\n    return (\r\n        <div>\r\n            <nav>\r\n             \r\n                <ul className=\"nav-links\">\r\n                    <Link style={navStyle} to=\"/\">\r\n                    <li>Home</li>\r\n                    </Link>\r\n                    <Link style={navStyle} to=\"/random\">\r\n                    <li>Random Article</li>\r\n                    </Link>\r\n                    <Link style={navStyle} to=\"/Ranking\">\r\n                    <li>Rank Articles</li>\r\n                    </Link>\r\n                   \r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React, {useState, useEffect} from 'react'\r\nimport './App.css';\r\n\r\nfunction RandomArticle() {\r\n\r\n  useEffect(()=>{\r\n\r\n    let randomNumber = Math.floor(Math.random() * 3);\r\n    let articleTypes = [2,3,5]\r\n    console.log(randomNumber);\r\n       \r\n    const fetchItems = async () => {\r\n\r\n     \r\n        const data = await fetch(`https://raw.githubusercontent.com/bbc/news-coding-test-dataset/master/data/article-${articleTypes[randomNumber]}.json`);\r\n\r\n        const Article = await data.json();\r\n  \r\n        setArticlesTitle(Article.title);\r\n        setArticlesHeading(Article.body[0].model.text);\r\n        setArticles(Article.body);\r\n       \r\n    }\r\n    fetchItems();\r\n    \r\n},[]);\r\n\r\nconst [articles, setArticles] = useState([]);\r\nconst [articleTitle, setArticlesTitle] = useState('');\r\nconst [articleHeading, setArticlesHeading] = useState('');\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n        <h1>Generate a random Article</h1>\r\n\r\n        <h1>{articleTitle}</h1>\r\n            <h2>{articleHeading}</h2>\r\n\r\n            {articles.map(article => \r\n\r\n          \r\n                <b>{article.type == 'paragraph' ? \r\n                <p>{article.model.text}</p>\r\n                \r\n                : <img src={article.model.url} alt={article.model.altText} width={article.model.width} height={article.model.height}></img>\r\n                \r\n                }\r\n                </b>\r\n            )}\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomArticle;\r\n","import React, {useState, useEffect} from 'react'\r\n\r\nexport default function Article({match}) {\r\n//use articles 2, 3, 5\r\n    useEffect(()=>{\r\n       \r\n        const fetchItems = async () => {\r\n            const data = await fetch(`https://raw.githubusercontent.com/bbc/news-coding-test-dataset/master/data/article-${match.params.id}.json`);\r\n    \r\n            const Article = await data.json();\r\n      \r\n            setArticlesTitle(Article.title);\r\n            setArticlesHeading(Article.body[0].model.text);\r\n            setArticles(Article.body);\r\n           \r\n        }\r\n        fetchItems();\r\n        console.log(match);\r\n    },[]);\r\n\r\n    const [articles, setArticles] = useState([]);\r\n    const [articleTitle, setArticlesTitle] = useState('');\r\n    const [articleHeading, setArticlesHeading] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <h1>{articleTitle}</h1>\r\n            <h2>{articleHeading}</h2>\r\n           \r\n            {articles.map(article => \r\n            \r\n                <b>{article.type == 'paragraph' ? \r\n                <p>{article.model.text}</p>\r\n                : \r\n                <img src={article.model.url} alt={article.model.altText} width={article.model.width} height={article.model.height}></img>\r\n                \r\n                }\r\n                </b>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport axios from 'axios';\r\n\r\nfunction Rank () {\r\n\r\n    const [highestRank, setHighestRank] = useState(\"\");\r\n    const [middleRank, setMiddleRank] = useState(\"\");\r\n    const [lowestRank, setLowestRank] = useState(\"\");\r\n\r\n    const [displayHighestRank, setDisplayHighestRank] = useState(\"\");\r\n    const [displayMiddleRank, setDisplayMiddleRank] = useState(\"\");\r\n    const [displayLowestRank, setDisplayLowestRank] = useState(\"\");\r\n\r\n    function highRankF(event) {\r\n       \r\n        setHighestRank(event.target.value);\r\n    }\r\n\r\n    function middleRankF(event) {\r\n     \r\n        setMiddleRank(event.target.value);\r\n    }\r\n\r\n    function lowestRankF(event) {\r\n     \r\n        setLowestRank(event.target.value);\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        setDisplayHighestRank(highestRank);\r\n        setDisplayMiddleRank(middleRank);\r\n        setDisplayLowestRank(lowestRank);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Rank Page</h1>\r\n            <p>Please choose article <strong>2</strong>, <strong>3</strong> and <strong>5</strong> to place in a ranking</p>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"number\" placeholder=\"Highest Rank\"name=\"highestRank\" onChange={highRankF}/>\r\n                <input type=\"number\" placeholder=\"Middle Rank\"name=\"middleRank\" onChange={middleRankF}/>\r\n                <input type=\"number\" placeholder=\"Lowest Rank\"name=\"lowestRank\" onChange={lowestRankF}/>\r\n                \r\n                <button type=\"submit\">Submit Rank</button>\r\n            </form>        \r\n            <section>\r\n            <h1>Article {displayHighestRank} has the highest rank</h1>\r\n            <h1>Article {displayMiddleRank} has the second highest rank</h1>\r\n            <h1>Article {displayLowestRank} has the lowest rank</h1>\r\n            </section>\r\n            \r\n        </div>\r\n    )\r\n    \r\n \r\n}\r\n\r\nexport default Rank;\r\n","import React from 'react';\r\nimport Nav from './components/nav/nav';\r\nimport {Link} from 'react-router-dom';\r\nimport RandomArticle from './random-article';\r\nimport Article from './article';\r\nimport Rank from './rank';\r\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom'\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <Router>\r\n      <div className=\"App\">\r\n      <Nav/>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home}/>\r\n        <Route path=\"/random\" component={RandomArticle}/>\r\n        <Route path=\"/Ranking\" component={Rank}/>\r\n        <Route exact path=\"/article/:id\" component={Article}/>\r\n      </Switch>\r\n      \r\n      </div>\r\n    </Router>\r\n \r\n  );\r\n}\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Please click on the following Articles</h1>\r\n       <Link to=\"/article/2\">\r\n         <h1>Article 2</h1>\r\n        </Link>\r\n        <Link  to=\"/article/3\">\r\n        <h1>Article 3</h1>\r\n        </Link>\r\n        <Link to=\"/article/5\">\r\n        <h1>Article 5</h1>\r\n        </Link>\r\n  </div>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}